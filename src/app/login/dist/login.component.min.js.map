{"version":3,"sources":["login.component.ts"],"names":["core_1","require","forms_1","LoginComponent","builder","toastr","service","router","this","loginform","group","id","control","Validators","required","password","sessionStorage","clear","prototype","proceedlogin","_this","valid","GetUserbyCode","value","subscribe","item","result","isactive","setItem","role","navigate","error","warning","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,QAAAD,QAAA,kBAUAE,eAAA,WACE,SAAAA,EACUC,EACCC,EACCC,EACFC,GAHAC,KAAAJ,QAAAA,EACCI,KAAAH,OAAAA,EACCG,KAAAF,QAAAA,EACFE,KAAAD,OAAAA,EAMVC,KAAAC,UAAYD,KAAKJ,QAAQM,MAAM,CAC7BC,GAAIH,KAAKJ,QAAQQ,QAAQ,GAAIV,QAAAW,WAAWC,UACxCC,SAAUP,KAAKJ,QAAQQ,QAAQ,GAAIV,QAAAW,WAAWC,YAN5CE,eAAeC,QA6BrB,OApBEd,EAAAe,UAAAC,aAAA,WAAA,IAAAC,EAAAZ,KACMA,KAAKC,UAAUY,MACjBb,KAAKF,QAAQgB,cAAcd,KAAKC,UAAUc,MAAMZ,IAAIa,UAAU,SAAAC,GAC5DL,EAAKM,OAASD,EACVL,EAAKM,OAAOX,WAAaK,EAAKX,UAAUc,MAAMR,SAC5CK,EAAKM,OAAOC,UACdX,eAAeY,QAAQ,WAAWR,EAAKM,OAAOf,IAC9CK,eAAeY,QAAQ,OAAOR,EAAKM,OAAOG,MAC1CT,EAAKb,OAAOuB,SAAS,CAAC,MAEtBV,EAAKf,OAAO0B,MAAM,uBAAwB,iBAG5CX,EAAKf,OAAO0B,MAAM,yBAItBvB,KAAKH,OAAO2B,QAAQ,6BAjCb7B,EAAc8B,WAAA,CAL1BjC,OAAAkC,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,4BAEDlC,GAAb,GAAamC,QAAAnC,eAAAA","file":"login.component.min.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr'\r\nimport { AuthService } from '../service/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  constructor(\r\n    private builder: FormBuilder,\r\n     private toastr: ToastrService,\r\n      private service: AuthService,\r\n    private router: Router\r\n    ) {\r\n      sessionStorage.clear();\r\n  }\r\n  result: any;\r\n\r\n  loginform = this.builder.group({\r\n    id: this.builder.control('', Validators.required),\r\n    password: this.builder.control('', Validators.required)\r\n  });\r\n\r\n  proceedlogin() {\r\n    if (this.loginform.valid) {\r\n      this.service.GetUserbyCode(this.loginform.value.id).subscribe(item => {\r\n        this.result = item;\r\n        if (this.result.password === this.loginform.value.password) {\r\n          if (this.result.isactive) {\r\n            sessionStorage.setItem('username',this.result.id);\r\n            sessionStorage.setItem('role',this.result.role);\r\n            this.router.navigate(['']);\r\n          } else {\r\n            this.toastr.error('Please contact Admin', 'InActive User');\r\n          }\r\n        } else {\r\n          this.toastr.error('Invalid credentials');\r\n        }\r\n      });\r\n    } else {\r\n      this.toastr.warning('Please enter valid data.')\r\n    }\r\n  }\r\n}\r\n"]}