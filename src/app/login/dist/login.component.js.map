{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA0C;AAC1C,wCAAyD;AAUzD;IACE,wBACU,OAAoB,EACnB,MAAqB,EACpB,OAAoB,EACtB,MAAc;QAHd,YAAO,GAAP,OAAO,CAAa;QACnB,WAAM,GAAN,MAAM,CAAe;QACpB,YAAO,GAAP,OAAO,CAAa;QACtB,WAAM,GAAN,MAAM,CAAQ;QAMxB,cAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAC7B,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;YACjD,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;SACxD,CAAC,CAAC;QAPC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAQD,qCAAY,GAAZ;QAAA,iBAmBC;QAlBC,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;gBAChE,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE;oBAC1D,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;wBACxB,cAAc,CAAC,OAAO,CAAC,UAAU,EAAC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;wBAClD,cAAc,CAAC,OAAO,CAAC,MAAM,EAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAChD,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC5B;yBAAM;wBACL,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;qBAC5D;iBACF;qBAAM;oBACL,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;iBAC1C;YACH,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAA;SAChD;IACH,CAAC;IAnCU,cAAc;QAL1B,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;SACrC,CAAC;OACW,cAAc,CAoC1B;IAAD,qBAAC;CApCD,AAoCC,IAAA;AApCY,wCAAc","file":"login.component.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr'\r\nimport { AuthService } from '../service/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  constructor(\r\n    private builder: FormBuilder,\r\n     private toastr: ToastrService,\r\n      private service: AuthService,\r\n    private router: Router\r\n    ) {\r\n      sessionStorage.clear();\r\n  }\r\n  result: any;\r\n\r\n  loginform = this.builder.group({\r\n    id: this.builder.control('', Validators.required),\r\n    password: this.builder.control('', Validators.required)\r\n  });\r\n\r\n  proceedlogin() {\r\n    if (this.loginform.valid) {\r\n      this.service.GetUserbyCode(this.loginform.value.id).subscribe(item => {\r\n        this.result = item;\r\n        if (this.result.password === this.loginform.value.password) {\r\n          if (this.result.isactive) {\r\n            sessionStorage.setItem('username',this.result.id);\r\n            sessionStorage.setItem('role',this.result.role);\r\n            this.router.navigate(['']);\r\n          } else {\r\n            this.toastr.error('Please contact Admin', 'InActive User');\r\n          }\r\n        } else {\r\n          this.toastr.error('Invalid credentials');\r\n        }\r\n      });\r\n    } else {\r\n      this.toastr.warning('Please enter valid data.')\r\n    }\r\n  }\r\n}\r\n"]}