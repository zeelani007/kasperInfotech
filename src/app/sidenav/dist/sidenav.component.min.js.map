{"version":3,"sources":["sidenav.component.ts"],"names":["core_1","require","layout_1","router_1","SidenavComponent","route","breakpointObserver","_this","this","title","user","isMobile","mode","uiContent","progrssBarClass","isloading","isadmin","isMenuVisible","console","log","observe","Breakpoints","HandsetLandscape","HandsetPortrait","subscribe","result","matches","prototype","ngOnChanges","ngOnInit","logout","navigate","isAuth","navigationInterceptor","event","NavigationStart","NavigationEnd","NavigationCancel","NavigationError","ngOnDestroy","ngDoCheck","currentroute","url","role","sessionStorage","getItem","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YACA,IAAAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,uBACAE,SAAAF,QAAA,mBAUAG,iBAAA,WAYE,SAAAA,EAEUC,EAEAC,GAJV,IAAAC,EAAAC,KAEUA,KAAAH,MAAAA,EAEAG,KAAAF,mBAAAA,EAfVE,KAAAC,MAAQ,SACRD,KAAAE,KAAY,KACZF,KAAAG,UAAoB,EACpBH,KAAAI,KAAO,OACPJ,KAAAK,UAAY,UACZL,KAAAM,gBAAkB,eAClBN,KAAAO,WAAY,EACXP,KAAAQ,SAAQ,EACTR,KAAAS,eAAc,EAUZC,QAAQC,IAAI,gBAEZX,KAAKO,WAAY,EAEjBT,EAAmBc,QAAQ,CACzBlB,SAAAmB,YAAYC,iBACZpB,SAAAmB,YAAYE,kBACXC,UAAU,SAAAC,GACXP,QAAQC,IAAIM,GACRA,EAAOC,SAETnB,EAAKI,UAAW,EAChBJ,EAAKK,KAAO,OACZL,EAAKM,UAAY,mBAGjBN,EAAKI,UAAW,EAChBJ,EAAKK,KAAO,OACZL,EAAKM,UAAY,aAgFzB,OAtEET,EAAAuB,UAAAC,YAAA,WACEV,QAAQC,IAAI,iBAIdf,EAAAuB,UAAAE,SAAA,WACEX,QAAQC,IAAI,aAEZX,KAAKO,WAAY,GAGnBX,EAAAuB,UAAAG,OAAA,WAGEtB,KAAKH,MAAM0B,SAAS,CAAC,WAKvB3B,EAAAuB,UAAAK,OAAA,SAAOA,KAOC5B,EAAAuB,UAAAM,sBAAR,SAA8BC,GACxBA,aAAiB/B,SAAAgC,kBACnB3B,KAAMM,gBAAkB,eACxBN,KAAKO,WAAY,GAEfmB,aAAiB/B,SAAAiC,gBACnB5B,KAAMM,gBAAkB,sBACxBN,KAAKO,WAAY,GAEfmB,aAAiB/B,SAAAkC,mBACnB7B,KAAMM,gBAAkB,sBACxBN,KAAKO,WAAY,GAEfmB,aAAiB/B,SAAAmC,kBACnB9B,KAAMM,gBAAkB,sBACxBN,KAAKO,WAAY,IAMrBX,EAAAuB,UAAAY,YAAA,WACE/B,KAAKF,mBAAmBiC,eAK1BnC,EAAAuB,UAAAa,UAAA,WACE,IAAIC,EAAejC,KAAKH,MAAMqC,IAC1BC,EAAKC,eAAeC,QAAQ,QAE9BrC,KAAKS,cADa,UAAhBwB,GAA4C,aAAhBA,EAO9BjC,KAAKQ,QADK,SAAR2B,GA7GKvC,EAAgB0C,WAAA,CAL5B9C,OAAA+C,UAAU,CACTC,SAAU,cACVC,YAAa,2BACbC,UAAW,CAAC,8BAED9C,GAAb,GAAa+C,QAAA/C,iBAAAA","file":"sidenav.component.min.js","sourcesContent":["\nimport { Component, OnInit, OnDestroy, OnChanges,DoCheck } from '@angular/core';\nimport { Breakpoints, BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Router,Route, Event, NavigationStart, NavigationEnd, NavigationCancel,ActivatedRoute, NavigationError } from '@angular/router';\n// import { AuthService } from '../_services';\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.css']\n})\nexport class SidenavComponent implements OnChanges, OnInit, OnDestroy  {\n  title = 'ng crm';\n  user: any = null;\n  isMobile: boolean = false;\n  mode = \"side\"\n  uiContent = \"content\"\n  progrssBarClass = \"progress-bar\";\n  isloading = true;\n   isadmin=false;\n  isMenuVisible=false;\n  \n\n  constructor(\n    // private loadingBar: SlimLoadingBarService,\n    private route: Router,\n   \n    private breakpointObserver: BreakpointObserver\n  )\n   {\n    console.log(\" constructor\")\n\n    this.isloading = true;\n\n    breakpointObserver.observe([\n      Breakpoints.HandsetLandscape,\n      Breakpoints.HandsetPortrait\n    ]).subscribe(result => {\n      console.log(result)\n      if (result.matches) {\n        // this.activateHandsetLayout();\n        this.isMobile = true;\n        this.mode = \"over\"\n        this.uiContent = \"mobile-content\"\n      }\n      else {\n        this.isMobile = false;\n        this.mode = \"side\"\n        this.uiContent = \"content\"\n      }\n    });\n\n    // this.route.events.subscribe((event: Event) => {\n    //   this.navigationInterceptor(event);\n    // })\n    //   ;\n  }\n\n  ngOnChanges() {\n    console.log(\" ngOnChanges\")\n  }\n\n\n  ngOnInit(): void {\n    console.log(\" ngOnInit\")\n   \n    this.isloading = false;\n  }\n\n  logout(): void {\n    // localStorage.removeItem('currentUser');\n    \n    this.route.navigate(['login']);\n  }\n\n\n\n  isAuth(isAuth?: any) {\n    if (isAuth) {\n     \n      // this.user = JSON.parse(localStorage.getItem(APP_USER_PROFILE)) || <User>{};\n    }\n  }\n\n  private navigationInterceptor(event: Event): void {\n    if (event instanceof NavigationStart) {\n      this. progrssBarClass = \"progress-bar\";\n      this.isloading = true;\n    }\n    if (event instanceof NavigationEnd) {\n      this. progrssBarClass = \"progress-bar-hidden\";\n      this.isloading = false;\n    }\n    if (event instanceof NavigationCancel) {\n      this. progrssBarClass = \"progress-bar-hidden\";\n      this.isloading = false;\n    }\n    if (event instanceof NavigationError) {\n      this. progrssBarClass = \"progress-bar-hidden\";\n      this.isloading = false;\n    }\n\n  }\n\n\n  ngOnDestroy() {\n    this.breakpointObserver.ngOnDestroy()\n    \n    //   this.router.events\n    // this.breakpoint.\n  }\n  ngDoCheck(): void {\n    let currentroute = this.route.url;\n    let role=sessionStorage.getItem('role');\n    if (currentroute == '/login' || currentroute == '/register') {\n      this.isMenuVisible = false\n    } else {\n      this.isMenuVisible = true\n    }\n\n    if (role == 'admin') {\n      this.isadmin = true;\n    }else{\n      this.isadmin = false;\n    }\n  }\n\n \n}\n"]}