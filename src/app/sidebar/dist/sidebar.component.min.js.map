{"version":3,"sources":["sidebar.component.ts"],"names":["core_1","require","layout_1","router_1","SidebarComponent","route","breakpointObserver","_this","this","title","user","mode","uiContent","progrssBarClass","isloading","isadmin","isMenuVisible","console","log","observe","Breakpoints","HandsetLandscape","HandsetPortrait","subscribe","result","matches","isMobile","prototype","ngOnChanges","navigationInterceptor","event","NavigationStart","NavigationEnd","NavigationCancel","NavigationError","ngDoCheck","currentroute","url","role","sessionStorage","getItem","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,SAAAD,QAAA,uBACAE,SAAAF,QAAA,mBAUAG,iBAAA,WAYE,SAAAA,EAEUC,EAEAC,GAJV,IAAAC,EAAAC,KAEUA,KAAAH,MAAAA,EAEAG,KAAAF,mBAAAA,EAfVE,KAAAC,MAAQ,SACRD,KAAAE,KAAY,KAEZF,KAAAG,KAAO,OACPH,KAAAI,UAAY,UACZJ,KAAAK,gBAAkB,eAClBL,KAAAM,WAAY,EACXN,KAAAO,SAAQ,EACTP,KAAAQ,eAAc,EAUZC,QAAQC,IAAI,gBAEZV,KAAKM,WAAY,EAEjBR,EAAmBa,QAAQ,CACzBjB,SAAAkB,YAAYC,iBACZnB,SAAAkB,YAAYE,kBACXC,UAAU,SAAAC,GACXP,QAAQC,IAAIM,GACRA,EAAOC,SAETlB,EAAKmB,UAAW,EAChBnB,EAAKI,KAAO,OACZJ,EAAKK,UAAY,mBAGjBL,EAAKmB,UAAW,EAChBnB,EAAKI,KAAO,OACZJ,EAAKK,UAAY,aAgFzB,OAtEER,EAAAuB,UAAAC,YAAA,WACEX,QAAQC,IAAI,iBAyBNd,EAAAuB,UAAAE,sBAAR,SAA8BC,GACxBA,aAAiB3B,SAAA4B,kBACnBvB,KAAMK,gBAAkB,eACxBL,KAAKM,WAAY,GAEfgB,aAAiB3B,SAAA6B,gBACnBxB,KAAMK,gBAAkB,sBACxBL,KAAKM,WAAY,GAEfgB,aAAiB3B,SAAA8B,mBACnBzB,KAAMK,gBAAkB,sBACxBL,KAAKM,WAAY,GAEfgB,aAAiB3B,SAAA+B,kBACnB1B,KAAMK,gBAAkB,sBACxBL,KAAKM,WAAY,IAYrBV,EAAAuB,UAAAQ,UAAA,WACE,IAAIC,EAAe5B,KAAKH,MAAMgC,IAC1BC,EAAKC,eAAeC,QAAQ,QAE9BhC,KAAKQ,cADa,UAAhBoB,GAA4C,aAAhBA,EAO9B5B,KAAKO,QADK,SAARuB,GA7GKlC,EAAgBqC,WAAA,CAL5BzC,OAAA0C,UAAU,CACTC,SAAU,cACVC,YAAa,2BACbC,UAAW,CAAC,+BAEDzC,GAAb,GAAa0C,QAAA1C,iBAAAA","file":"sidebar.component.min.js","sourcesContent":["import { Component, OnInit, OnDestroy, OnChanges,DoCheck } from '@angular/core';\r\nimport { Breakpoints, BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\r\nimport { Router,Route, Event, NavigationStart, NavigationEnd, NavigationCancel,ActivatedRoute, NavigationError } from '@angular/router';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss']\r\n})\r\nexport class SidebarComponent implements OnInit, OnChanges, OnDestroy {\r\n  title = 'ng crm';\r\n  user: any = null;\r\n  isMobile: boolean;\r\n  mode = \"side\"\r\n  uiContent = \"content\"\r\n  progrssBarClass = \"progress-bar\";\r\n  isloading = true;\r\n   isadmin=false;\r\n  isMenuVisible=false;\r\n  \r\n\r\n  constructor(\r\n    // private loadingBar: SlimLoadingBarService,\r\n    private route: Router,\r\n    // public AuthService: AuthService,\r\n    private breakpointObserver: BreakpointObserver\r\n  )\r\n   {\r\n    console.log(\" constructor\")\r\n\r\n    this.isloading = true;\r\n\r\n    breakpointObserver.observe([\r\n      Breakpoints.HandsetLandscape,\r\n      Breakpoints.HandsetPortrait\r\n    ]).subscribe(result => {\r\n      console.log(result)\r\n      if (result.matches) {\r\n        // this.activateHandsetLayout();\r\n        this.isMobile = true;\r\n        this.mode = \"over\"\r\n        this.uiContent = \"mobile-content\"\r\n      }\r\n      else {\r\n        this.isMobile = false;\r\n        this.mode = \"side\"\r\n        this.uiContent = \"content\"\r\n      }\r\n    });\r\n\r\n    // this.route.events.subscribe((event: Event) => {\r\n    //   this.navigationInterceptor(event);\r\n    // })\r\n    //   ;\r\n  }\r\n\r\n  ngOnChanges() {\r\n    console.log(\" ngOnChanges\")\r\n  }\r\n\r\n\r\n  // ngOnInit(): void {\r\n  //   console.log(\" ngOnInit\")\r\n  //   this.user = this.AuthService.getUser();\r\n  //   this.isloading = false;\r\n  // }\r\n\r\n  // logout(): void {\r\n  //   // localStorage.removeItem('currentUser');\r\n  //   this.AuthService.logout()\r\n  //   this.route.navigate(['login']);\r\n  // }\r\n\r\n\r\n\r\n  // isAuth(isAuth?: any) {\r\n  //   if (isAuth) {\r\n  //     this.user = this.authService.getUser()\r\n  //     // this.user = JSON.parse(localStorage.getItem(APP_USER_PROFILE)) || <User>{};\r\n  //   }\r\n  // }\r\n\r\n  private navigationInterceptor(event: Event): void {\r\n    if (event instanceof NavigationStart) {\r\n      this. progrssBarClass = \"progress-bar\";\r\n      this.isloading = true;\r\n    }\r\n    if (event instanceof NavigationEnd) {\r\n      this. progrssBarClass = \"progress-bar-hidden\";\r\n      this.isloading = false;\r\n    }\r\n    if (event instanceof NavigationCancel) {\r\n      this. progrssBarClass = \"progress-bar-hidden\";\r\n      this.isloading = false;\r\n    }\r\n    if (event instanceof NavigationError) {\r\n      this. progrssBarClass = \"progress-bar-hidden\";\r\n      this.isloading = false;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ngOnDestroy() {\r\n  //   this.breakpointObserver.ngOnDestroy()\r\n  //   this.authService.logout()\r\n  //   //   this.router.events\r\n  //   // this.breakpoint.\r\n  // }\r\n  ngDoCheck(): void {\r\n    let currentroute = this.route.url;\r\n    let role=sessionStorage.getItem('role');\r\n    if (currentroute == '/login' || currentroute == '/register') {\r\n      this.isMenuVisible = false\r\n    } else {\r\n      this.isMenuVisible = true\r\n    }\r\n\r\n    if (role == 'admin') {\r\n      this.isadmin = true;\r\n    }else{\r\n      this.isadmin = false;\r\n    }\r\n  }\r\n\r\n \r\n}\r\n"]}