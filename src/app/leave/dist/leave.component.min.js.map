{"version":3,"sources":["leave.component.ts"],"names":["forms_1","require","core_1","table_1","paginator_1","sort_1","LeaveComponent","builder","service","router","dialog","toastr","this","displayedColumns","registerform","group","id","control","Validators","compose","required","minLength","name","email","gender","fromdate","todate","reason","role","isactive","LoadUser","prototype","ngAfterViewInit","_this","Getall","subscribe","res","userlist","dataSource","MatTableDataSource","paginator","sort","updateuser","code","OpenDialog","enteranimation","exitanimation","open","LeaveComponent_1","enterAnimationDuration","exitAnimationDuration","width","data","usercode","afterClosed","proceedregister","valid","RegisterUser","value","result","success","warning","__decorate","ViewChild","MatPaginator","MatSort","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YACA,IAAAA,QAAAC,QAAA,kBAIAC,OAAAD,QAAA,iBAEAE,QAAAF,QAAA,2BACAG,YAAAH,QAAA,+BACAI,OAAAJ,QAAA,0BAUAK,eAAA,WAEE,SAAAA,EAAoBC,EAA8BC,EAA8BC,EAAuBC,EAC7FC,GADUC,KAAAL,QAAAA,EAA8BK,KAAAJ,QAAAA,EAA8BI,KAAAH,OAAAA,EAAuBG,KAAAF,OAAAA,EAC7FE,KAAAD,OAAAA,EAsBVC,KAAAC,iBAA6B,CAAC,WAAW,OAAO,OAAO,KAAK,SAAU,QAqBtED,KAAAE,aAAeF,KAAKL,QAAQQ,MAAM,CAChCC,GAAIJ,KAAKL,QAAQU,QAAQ,GAAIjB,QAAAkB,WAAWC,QAAQ,CAACnB,QAAAkB,WAAWE,SAAUpB,QAAAkB,WAAWG,UAAU,MAC3FC,KAAMV,KAAKL,QAAQU,QAAQ,GAAIjB,QAAAkB,WAAWE,UAE1CG,MAAOX,KAAKL,QAAQU,QAAQ,GAAIjB,QAAAkB,WAAWC,QAAQ,CAACnB,QAAAkB,WAAWE,SAAUpB,QAAAkB,WAAWK,SACpFC,OAAQZ,KAAKL,QAAQU,QAAQ,QAC7BQ,SAAUb,KAAKL,QAAQU,QAAQ,IAC/BS,OAAQd,KAAKL,QAAQU,QAAQ,IAC7BU,OAAQf,KAAKL,QAAQU,QAAQ,IAE7BW,KAAMhB,KAAKL,QAAQU,QAAQ,IAC3BY,SAAUjB,KAAKL,QAAQU,SAAQ,KAnD7BL,KAAKkB,iBAgEX,SAtEaxB,GAcXyB,UAAAC,gBAAA,aAGA1B,EAAAyB,UAAAD,SAAA,WAAA,IAAAG,EAAArB,KACEA,KAAKJ,QAAQ0B,SAASC,UAAU,SAAAC,GAC9BH,EAAKI,SAAWD,EAChBH,EAAKK,WAAa,IAAInC,QAAAoC,mBAAmBN,EAAKI,UAC9CJ,EAAKK,WAAWE,UAAYP,EAAKO,UACjCP,EAAKK,WAAWG,KAAOR,EAAKQ,QAKhCnC,EAAAyB,UAAAW,WAAA,SAAWC,GACT/B,KAAKgC,WAAW,SAAU,QAASD,IAGrCrC,EAAAyB,UAAAa,WAAA,SAAWC,EAAqBC,EAAoBH,GAApD,IAAAV,EAAArB,KACgBA,KAAKF,OAAOqC,KAAKC,EAAgB,CAC7CC,uBAAwBJ,EACxBK,sBAAuBJ,EACvBK,MAAO,MACPC,KAAM,CACJC,SAAUV,KAGRW,cAAcnB,UAAU,SAAAC,GAC5BH,EAAKH,cAkBTxB,EAAAyB,UAAAwB,gBAAA,WAAA,IAAAtB,EAAArB,KACMA,KAAKE,aAAa0C,MACpB5C,KAAKJ,QAAQiD,aAAa7C,KAAKE,aAAa4C,OAAOvB,UAAU,SAAAwB,GAC3D1B,EAAKtB,OAAOiD,QAAQ,4BAA4B,0BAIlDhD,KAAKD,OAAOkD,QAAQ,6BAvDCC,WAAA,CAAxB5D,OAAA6D,UAAU3D,YAAA4D,wCACSF,WAAA,CAAnB5D,OAAA6D,UAAU1D,OAAA4D,8BAZA3D,EAAc0C,EAAAc,WAAA,CAL1B5D,OAAAgE,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,4BAED/D,GAAb,GAAagE,QAAAhE,eAAAA","file":"leave.component.min.js","sourcesContent":["\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../leave/auth.services';\r\nimport { ToastrService } from 'ngx-toastr'\r\nimport { AfterViewInit, Component, ViewChild } from '@angular/core';\r\n\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-leave',\r\n  templateUrl: './leave.component.html',\r\n  styleUrls: ['./leave.component.css']\r\n})\r\nexport class LeaveComponent {\r\n\r\n  constructor(private builder: FormBuilder, private service: AuthService, private router: Router,private dialog: MatDialog,\r\n    private toastr: ToastrService)\r\n    \r\n    {\r\n      this.LoadUser();\r\n\r\n  }\r\n  userlist: any;\r\n  dataSource: any;\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n  LoadUser() {\r\n    this.service.Getall().subscribe(res => {\r\n      this.userlist = res;\r\n      this.dataSource = new MatTableDataSource(this.userlist);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });\r\n  }\r\n  displayedColumns: string[] = ['username','name','from','to','reason', 'role'];\r\n\r\n  updateuser(code: any) {\r\n    this.OpenDialog('1000ms', '600ms', code);\r\n  }\r\n\r\n  OpenDialog(enteranimation: any, exitanimation: any, code: string) {\r\n    const popup = this.dialog.open(LeaveComponent, {\r\n      enterAnimationDuration: enteranimation,\r\n      exitAnimationDuration: exitanimation,\r\n      width: '30%',\r\n      data: {\r\n        usercode: code\r\n      }\r\n    });\r\n    popup.afterClosed().subscribe(res => {\r\n      this.LoadUser();\r\n    });\r\n  }\r\n\r\n\r\n  registerform = this.builder.group({\r\n    id: this.builder.control('', Validators.compose([Validators.required, Validators.minLength(4)])),\r\n    name: this.builder.control('', Validators.required),\r\n    // password: this.builder.control('', Validators.compose([Validators.required, Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}')])),\r\n    email: this.builder.control('', Validators.compose([Validators.required, Validators.email])),\r\n    gender: this.builder.control('male'),\r\n    fromdate: this.builder.control(''),\r\n    todate: this.builder.control(''),\r\n    reason: this.builder.control(''),\r\n\r\n    role: this.builder.control(''),\r\n    isactive: this.builder.control(false)\r\n  });\r\n  proceedregister() {\r\n    if (this.registerform.valid) {\r\n      this.service.RegisterUser(this.registerform.value).subscribe(result => {\r\n        this.toastr.success('Please Wait For Approval.','Request successfully')\r\n        // this.router.navigate(['login'])\r\n      });\r\n    } else {\r\n      this.toastr.warning('Please enter valid data.')\r\n    }\r\n  }\r\n\r\n}\r\n"]}