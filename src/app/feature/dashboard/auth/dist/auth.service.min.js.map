{"version":3,"sources":["auth.service.ts"],"names":["operators_1","require","rxjs_1","constant_1","core_1","AuthService","http","_router","this","_loginUrl","Constant","API_ENDPOINT","_client_id","_client_secret","tokenHeader","Authorization","btoa","Content-Type","prototype","getFormUrlEncoded","toConvert","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","errorHandler","error","console","log","throwError","loginUser","user","localStorage","removeItem","data","username","password","grant_type","post","headers","refreshToken","request","next","_this","getItem","callRefreshToken","subscribe","res","setItem","access_token","refresh_token","handle","location","reload","err","logout","navigate","client_id","client_secret","pipe","catchError","isLoggedIn","isAdmin","clear","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,YAAAC,QAAA,kBACAC,OAAAD,QAAA,QACAE,WAAAF,QAAA,0BACAG,OAAAH,QAAA,iBAKAI,YAAA,WAWE,SAAAA,EAAoBC,EAA0BC,GAA1BC,KAAAF,KAAAA,EAA0BE,KAAAD,QAAAA,EATtCC,KAAAC,UAAYN,WAAAO,SAASC,aAAe,eACpCH,KAAAI,WAAa,cACbJ,KAAAK,eAAiB,cAEjBL,KAAAM,YAAc,CACpBC,cAAiB,SAAWC,KAAKR,KAAKI,WAAa,IAAMJ,KAAKK,gBAC9DI,eAAgB,qCA0FpB,OApFEZ,EAAAa,UAAAC,kBAAA,SAAkBC,GAChB,IAAMC,EAAW,GAEjB,IAAK,IAAMC,KAAYF,EAAW,CAChC,IAAMG,EAAaC,mBAAmBF,GAChCG,EAAeD,mBAAmBJ,EAAUE,IAClDD,EAASK,KAAKH,EAAa,IAAME,GAEnC,OAAOJ,EAASM,KAAK,MAGvBtB,EAAAa,UAAAU,aAAA,SAAaC,GAEX,OADAC,QAAQC,IAAI,0BAA2BF,GAChC3B,OAAA8B,WAAWH,IAGpBxB,EAAAa,UAAAe,UAAA,SAAUC,GACRC,aAAaC,WAAW,SACxBD,aAAaC,WAAW,gBAExB,IAAMC,EAAO,CACXC,SAAYJ,EAAKI,SACjBC,SAAYL,EAAKK,SACjBC,WAAc,YAGhB,OAAOhC,KAAKF,KAAKmC,KAAUjC,KAAKC,UAAWD,KAAKW,kBAAkBkB,GAAO,CAAEK,QAASlC,KAAKM,eAG3FT,EAAAa,UAAAyB,aAAA,SAAaC,EAA2BC,GAAxC,IAAAC,EAAAtC,KAE8C,MAAxC2B,aAAaY,QAAQ,gBACvBvC,KAAKwC,mBACFC,UAAU,SAAAC,GAETf,aAAagB,QAAQ,QAASD,EAAIE,cAClCjB,aAAagB,QAAQ,eAAgBD,EAAIG,eACzCR,EAAKS,OAAOV,GACZW,SAASC,UAET,SAAAC,GAEEX,EAAKY,WAIXlD,KAAKD,QAAQoD,SAAS,CAAC,OAI3BtD,EAAAa,UAAA8B,iBAAA,WACEb,aAAaC,WAAW,SAGxB,IAAMC,EAAO,CACXG,WAAc,gBACdoB,UAAapD,KAAKI,WAClBiD,cAAiBrD,KAAKK,eACtBwC,cAAiBlB,aAAaY,QAAQ,iBAGxC,OAAOvC,KAAKF,KAAKmC,KAAUjC,KAAKC,UAAWD,KAAKW,kBAAkBkB,GAAO,CAAEK,QAASlC,KAAKM,cACtFgD,KAAK9D,YAAA+D,WAAWvD,KAAKoB,gBAG1BvB,EAAAa,UAAA8C,WAAA,WAEE,QAAS7B,aAAaY,QAAQ,UAGhC1C,EAAAa,UAAA+C,QAAA,WACE,MAAwC,eAAjC9B,aAAaY,QAAQ,SAG9B1C,EAAAa,UAAAwC,OAAA,WAEEvB,aAAaC,WAAW,SACxBD,aAAaC,WAAW,gBACxBD,aAAaC,WAAW,QACxBD,aAAa+B,QACb1D,KAAKD,QAAQoD,SAAS,CAAC,OA9FdtD,EAAW8D,WAAA,CADvB/D,OAAAgE,cACY/D,GAAb,GAAagE,QAAAhE,YAAAA","file":"auth.service.min.js","sourcesContent":["import { catchError } from 'rxjs/operators';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { Constant } from './../constant/constant';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n  private _loginUrl = Constant.API_ENDPOINT + '/oauth/token';\r\n  private _client_id = 'demo-client';\r\n  private _client_secret = 'demo-secret';\r\n\r\n  private tokenHeader = {\r\n    'Authorization': 'Basic ' + btoa(this._client_id + ':' + this._client_secret),\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n  };\r\n\r\n  constructor(private http: HttpClient, private _router: Router) { }\r\n\r\n  // convert to form data\r\n  getFormUrlEncoded(toConvert) {\r\n    const formBody = [];\r\n    // tslint:disable-next-line:forin\r\n    for (const property in toConvert) {\r\n      const encodedKey = encodeURIComponent(property);\r\n      const encodedValue = encodeURIComponent(toConvert[property]);\r\n      formBody.push(encodedKey + '=' + encodedValue);\r\n    }\r\n    return formBody.join('&');\r\n  }\r\n\r\n  errorHandler(error: any) {\r\n    console.log('Auth Service api error ', error);\r\n    return throwError(error);\r\n  }\r\n\r\n  loginUser(user) {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('access_token');\r\n\r\n    const data = {\r\n      'username': user.username,\r\n      'password': user.password,\r\n      'grant_type': 'password'\r\n    };\r\n\r\n    return this.http.post<any>(this._loginUrl, this.getFormUrlEncoded(data), { headers: this.tokenHeader });\r\n  }\r\n\r\n  refreshToken(request: HttpRequest<any>, next: HttpHandler) {\r\n\r\n    if (localStorage.getItem('refreshToken') != null) {\r\n      this.callRefreshToken()\r\n        .subscribe(res => {\r\n          // console.log('Token retrieve successful', res);\r\n          localStorage.setItem('token', res.access_token);\r\n          localStorage.setItem('refreshToken', res.refresh_token);\r\n          next.handle(request);\r\n          location.reload();\r\n        },\r\n          err => {\r\n            // console.log('refresh token also results into error ', err);\r\n            this.logout();\r\n          });\r\n    } else {\r\n      // console.log(\"Cant use Refresh token\");\r\n      this._router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  callRefreshToken(): Observable<any> {\r\n    localStorage.removeItem('token');\r\n    // console.log(\"refresh token called \", localStorage.getItem(\"refreshToken\"));\r\n\r\n    const data = {\r\n      'grant_type': 'refresh_token',\r\n      'client_id': this._client_id,\r\n      'client_secret': this._client_secret,\r\n      'refresh_token': localStorage.getItem('refreshToken')\r\n    };\r\n\r\n    return this.http.post<any>(this._loginUrl, this.getFormUrlEncoded(data), { headers: this.tokenHeader })\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  isLoggedIn() {\r\n    // console.log(\"is Logged In \", !!localStorage.getItem(\"token\"));\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  isAdmin() {\r\n    return localStorage.getItem('role') === 'ROLE_ADMIN';\r\n  }\r\n\r\n  logout() {\r\n    // console.log(\"Logged Out called\");\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('role');\r\n    localStorage.clear();\r\n    this._router.navigate(['/']);\r\n    // location.reload();\r\n  }\r\n\r\n}\r\n"]}