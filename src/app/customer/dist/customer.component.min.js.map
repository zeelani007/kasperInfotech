{"version":3,"sources":["customer.component.ts"],"names":["core_1","require","paginator_1","sort_1","table_1","CustomerComponent","service","toastr","router","this","haveedit","haveadd","havedelete","displayedColumns","SetAccesspermission","prototype","ngAfterViewInit","LoadCustomer","_this","GetAllCustomer","subscribe","res","customerlist","dataSource","MatTableDataSource","paginator","sort","Getaccessbyrole","getrole","accessdata","length","alert","navigate","updatecustomer","code","success","warning","removecustomer","addcustomer","applyFilter","event","filterValue","target","value","filter","trim","toLowerCase","firstPage","__decorate","ViewChild","MatPaginator","MatSort","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,YAAAD,QAAA,+BACAE,OAAAF,QAAA,0BACAG,QAAAH,QAAA,2BAgBAI,kBAAA,WAEE,SAAAA,EACUC,EACAC,EACAC,GAFAC,KAAAH,QAAAA,EACAG,KAAAF,OAAAA,EACAE,KAAAD,OAAAA,EAeVC,KAAAC,UAAW,EACXD,KAAAE,SAAU,EACVF,KAAAG,YAAa,EA8BbH,KAAAI,iBAA6B,CAAC,KAC9B,eACA,SACA,QACA,SACA,OACA,SACA,UAhDEJ,KAAKK,sBAmIT,OAtHET,EAAAU,UAAAC,gBAAA,aAGAX,EAAAU,UAAAE,aAAA,WAAA,IAAAC,EAAAT,KACEA,KAAKH,QAAQa,iBAAiBC,UAAU,SAAAC,GACtCH,EAAKI,aAAeD,EACpBH,EAAKK,WAAa,IAAInB,QAAAoB,mBAAmBN,EAAKI,cAC9CJ,EAAKK,WAAWE,UAAYP,EAAKO,UACjCP,EAAKK,WAAWG,KAAOR,EAAKQ,QAGhCrB,EAAAU,UAAAD,oBAAA,WAAA,IAAAI,EAAAT,KACEA,KAAKH,QAAQqB,gBAAgBlB,KAAKH,QAAQsB,UAAW,YAAYR,UAAU,SAAAC,GACzEH,EAAKW,WAAaR,EAGQ,EAAvBH,EAAKW,WAAWC,QACjBZ,EAAKP,QAAQO,EAAKW,WAAW,GAAGlB,QAChCO,EAAKR,SAASQ,EAAKW,WAAW,GAAGnB,SACjCQ,EAAKN,WAAWM,EAAKW,WAAW,GAAGjB,WACnCM,EAAKD,iBAELc,MAAM,qCACNb,EAAKV,OAAOwB,SAAS,CAAC,SAc5B3B,EAAAU,UAAAkB,eAAA,SAAeC,GAEVzB,KAAKC,SACLD,KAAKF,OAAO4B,QAAQ,WAErB1B,KAAKF,OAAO6B,QAAQ,mCAIxB/B,EAAAU,UAAAsB,eAAA,SAAeH,GACVzB,KAAKG,WACNH,KAAKF,OAAO4B,QAAQ,WAErB1B,KAAKF,OAAO6B,QAAQ,qCAGvB/B,EAAAU,UAAAuB,YAAA,WACK7B,KAAKE,QACNF,KAAKF,OAAO4B,QAAQ,WAErB1B,KAAKF,OAAO6B,QAAQ,qCA6BvB/B,EAAAU,UAAAwB,YAAA,SAAYC,GACV,IAAMC,EAAeD,EAAME,OAA4BC,MACvDlC,KAAKc,WAAWqB,OAASH,EAAYI,OAAOC,cAExCrC,KAAKc,WAAWE,WAClBhB,KAAKc,WAAWE,UAAUsB,aAnGLC,WAAA,CAAxBhD,OAAAiD,UAAU/C,YAAAgD,wCACSF,WAAA,CAAnBhD,OAAAiD,UAAU9C,OAAAgD,8BAjBA9C,EAAiB2C,WAAA,CAL7BhD,OAAAoD,UAAU,CACTC,SAAU,eACVC,YAAa,4BACbC,UAAW,CAAC,+BAEDlD,GAAb,GAAamD,QAAAnD,kBAAAA","file":"customer.component.min.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AuthService } from '../service/auth.service';\r\n\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CustomerformComponent } from '../customerform/customerform.component';\r\nimport { CoreService } from '../core.service';\r\nimport { EmployeeService } from '../services/customer.services';\r\n\r\n\r\n@Component({\r\n  selector: 'app-customer',\r\n  templateUrl: './customer.component.html',\r\n  styleUrls: ['./customer.component.css']\r\n})\r\nexport class CustomerComponent  {\r\n\r\n  constructor(\r\n    private service: AuthService,\r\n    private toastr:ToastrService,\r\n    private router: Router,\r\n    // private _dialog: MatDialog,\r\n    // private _empService: EmployeeService,\r\n    // private _coreService: CoreService\r\n    ) {\r\n   \r\n    this.SetAccesspermission();\r\n\r\n  }\r\n  customerlist: any;\r\n  dataSource: any;\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  accessdata: any;\r\n  haveedit = false;\r\n  haveadd = false;\r\n  havedelete = false;\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n  LoadCustomer() {\r\n    this.service.GetAllCustomer().subscribe(res => {\r\n      this.customerlist = res;\r\n      this.dataSource = new MatTableDataSource(this.customerlist);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });\r\n  }\r\n  SetAccesspermission() {\r\n    this.service.Getaccessbyrole(this.service.getrole(), 'customer').subscribe(res => {\r\n      this.accessdata = res;\r\n      //console.log(this.accessdata);\r\n\r\n      if(this.accessdata.length>0){\r\n        this.haveadd=this.accessdata[0].haveadd;\r\n        this.haveedit=this.accessdata[0].haveedit;\r\n        this.havedelete=this.accessdata[0].havedelete;\r\n        this.LoadCustomer();\r\n      }else{\r\n        alert('you are not authorized to access.');\r\n        this.router.navigate(['']);\r\n      }\r\n\r\n    });\r\n  }\r\n  displayedColumns: string[] = ['id',\r\n  'customerName',\r\n  'mobile',\r\n  'email',\r\n  'adress',\r\n  'type',\r\n  'status',\r\n  'action',];\r\n  \r\n  updatecustomer(code: any) {\r\n\r\n    if(this.haveedit){\r\n       this.toastr.success('Success')\r\n    }else{\r\n      this.toastr.warning(\"You don't have access for Edit\")\r\n    }\r\n\r\n  }\r\n  removecustomer(code: any) {\r\n    if(this.havedelete){\r\n      this.toastr.success('Success')\r\n   }else{\r\n     this.toastr.warning(\"You don't have access for Delete\")\r\n   }\r\n  }\r\n  addcustomer() {\r\n    if(this.haveadd){\r\n      this.toastr.success('Success')\r\n   }else{\r\n     this.toastr.warning(\"You don't have access for Create\")\r\n   }\r\n  }\r\n\r\n  // ngOnInit(): void {\r\n  //   this.getEmployeeList();\r\n  // }\r\n  // openAddEditEmpForm() {\r\n  //   const dialogRef = this._dialog.open(CustomerformComponent);\r\n  //   dialogRef.afterClosed().subscribe({\r\n  //     next: (val) => {\r\n  //       if (val) {\r\n  //         this.getEmployeeList();\r\n  //       }\r\n  //     },\r\n  //   });\r\n  // }\r\n\r\n  // getEmployeeList() {\r\n  //   this._empService.getEmployeeList().subscribe({\r\n  //     next: (res) => {\r\n  //       this.dataSource = new MatTableDataSource(res);\r\n  //       this.dataSource.sort = this.sort;\r\n  //       this.dataSource.paginator = this.paginator;\r\n  //     },\r\n  //     error: console.log,\r\n  //   });\r\n  // }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  // deleteEmployee(id: number) {\r\n  //   this._empService.deleteEmployee(id).subscribe({\r\n  //     next: (res) => {\r\n  //       this._coreService.openSnackBar('Employee deleted!', 'done');\r\n  //       this.getEmployeeList();\r\n  //     },\r\n  //     error: console.log,\r\n  //   });\r\n  // }\r\n\r\n  // openEditForm(data: any) {\r\n  //   const dialogRef = this._dialog.open(CustomerformComponent, {\r\n  //     data,\r\n  //   });\r\n\r\n  //   dialogRef.afterClosed().subscribe({\r\n  //     next: (val) => {\r\n  //       if (val) {\r\n  //         this.getEmployeeList();\r\n  //       }\r\n  //     },\r\n  //   });\r\n  // }\r\n}\r\n"]}